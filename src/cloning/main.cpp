// Input to the executable: config.clone, config.cym
// Output to the executable: genealogy.clone, config.cym, directories with clones from each iteration

#include "cloning_params.h"
#include "cytosim_params.h"
#include "create_clones.h"

#include <string>

int main()
{
	/* Read input file specifying the parameters for cloning algo
	* cloning_params.cpp, cloning_params.h
	*/

	// Define the name of the cloning config file
	const std::string configFileName = "config.clone" ;

	// Declare cloning objects and get params
	Clones clones ;
	get_cloning_params(clones, configFileName) ;

	// Declare cytosim object and get some params
	Cytosim cytosim ;
	get_cytosim_params(cytosim, configFileName) ;
	calculate_num_time_steps_and_frames(cytosim, clones) ;
	// edit config.cym to include the correct number of time steps and frames
	const std::string cytosimConfigFileName = "config.cym" ;
	// not done, pick up here!!!

	/* Generate cytosim input files for each clone
	* create_clones.cpp
	*/

	// Create the first round of empty directories (for zeroth iteration)
	create_empty_directories(clones) ;

	// Generate cytosim input files


	// For each iteration of cloning algo, loop following functions

		// Create directories for clones and populate
		// create_clones.cpp

		// Run iteration of simulation
		// cytosim_interface.cpp

		// Calculate the value of the observable
		// Executable generated by the files in /src/observable

		// Run cloning calculations to determine number of copies for each clone
		// analyze_clones.cpp (maybe rename to cloning_calculations.cpp)

		// Determine the logistics of copying
		// count_clones.cpp (maybe rename to cloning_logistics.cpp)

		// Generate cytosim "restart" files
		// cytosim_interface.cpp (maybe have a separate file)

		// increment clones.idxIter

}
