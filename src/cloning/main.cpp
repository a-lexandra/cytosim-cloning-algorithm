// Input to the executable: config.clone, config.cym
// Output to the executable: genealogy.clone, config.cym, directories with clones from each iteration

#include "cloning_params.h"
#include "cytosim_params.h"
#include "create_clones.h"
#include "cloning_calculations.h"
#include "interface.h"
#include "cloning_logistics.h"
#include "clone.h"
#include "iteration.h"

#include <string>
#include <cstdio>


int main()
{
	/* Set up cytosim interface through singularity
	 * interface.cpp, interface.h
	 */
	printf("Setting up interface with Singularity and Cytosim\n") ;

	// Declare interface struct
	Interface interface ;

	// Define strings with paths to singularity and cytosim singularity container
	const std::string singularityPath = "/usr/bin/singularity" ;
	const std::string cytosimContainerPath = "/home/alexandra/temp/singularity/cytosim_container/cytosim.sif" ;

	// Set interface path variables for later use
	set_interface(interface, singularityPath, cytosimContainerPath) ;

	/* Read input file specifying the parameters for cloning algo
	 * cloning_params.cpp, cloning_params.h
	 * cytosim_params.cpp, cytosim_params.h
	 */
	printf("Setting up cloning algorithm parameters\n") ;

	// Define the name of the cloning config file
	const std::string cloneConfigFileName = "config.clone" ;

	// Declare cloning struct and get params
	CloningParams cloningParams ;

	get_cloning_params(cloningParams, cloneConfigFileName) ;

	// Declare cytosim struct and get some params
	printf("Setting up Cytosim simulation parameters\n") ;

	CytosimParams cytosimParams ;

	get_cytosim_params(cytosimParams, cloneConfigFileName) ;
	calculate_num_time_steps_and_frames(cytosimParams, cloningParams) ;

	// generate config.cym that include the correct number of time steps and frames
	printf("Generating Cytosim config.cym file\n") ;

	gen_cytosim_config_file(cytosimParams) ;

	/* For each iteration of cloning algo, loop following functions
	 * iterator.cpp, iterator.h
	 */

	Iteration iteration ;

		/* Generate cytosim input files for each clone
		 * create_clones.cpp
		 */
		// Temporarily commented out
		//create_empty_directories(cloningParams) ;

		/* For each clone, run cytosim simulation and calculate wDotIntegral: */

			// Create clone object to store relevant data for the clone
			Clone pastClone ;
			Clone clone ;

			/* Run iteration of simulation
			 * interface.cpp, interface.h
			 */
			printf("Running cytosim simulation\n") ;
			run_sim(interface) ;
			printf("Generating Cytosim report\n") ;
			run_report(interface) ;

			/* Calculate the value of the observable
			 * using the executable generated by files in /src/observable
			 * interface.cpp, interface.h
			 */
			printf("Calculating wDot for trajectory\n") ;
			calc_observable("calculate") ;

			// Read value of wDotIntegral from output file into clone data struct

			const std::string wDotIntFileName = "wDotIntegral.txt" ;

			// Increment the cloning iteration counter to account for completed
			// iteration.
			cloningParams.idxIter++ ;

			printf("Setting up Cloning calculations\n") ;
			// clone.cpp, clohe.h
			read_wDotIntegral(clone, wDotIntFileName) ;
			get_time_stamp(cloningParams, clone) ;

			calc_s_a(cloningParams, clone, pastClone) ;

			sum_s_a(iteration, clone) ;

		/* Run cloning algorithm calculations
		 * cloning_calculations.cpp, cloning_calculations.h
		 */

			/* For each clone, perform the cloning algorithm calculations */

			printf("iteration.sumOfExponentials:\t\t%f\n", iteration.sumOfExponentials) ;



		/* Determine the logistics of copying
		 * cloning_logistics.cpp, cloning_logistics.h
		 */

		/* Generate cytosim "restart" files
		 * interface.cpp, interface.h
		 */
		// run_frametool(interface) ;





}
