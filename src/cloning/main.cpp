// Input to the executable: config.clone, config.cym
// Output to the executable: genealogy.clone, config.cym, directories with clones from each iteration

#include "cloning_params.h"
#include "cytosim_params.h"
#include "create_clones.h"
#include "analyze_clones.h"
#include "cytosim_interface.h"

#include <string>
#include <cstdio>


int main()
{
	/* Set up cytosim interface through singularity */

	// Declare interface struct
	Interface interface ;

	// Define strings with paths to singularity and cytosim singularity container
	const std::string singularityPath = "/usr/bin/singularity" ;
	const std::string cytosimContainerPath = "/home/alexandra/temp/singularity/cytosim_container/cytosim.sif" ;

	// Set interface path variables for later use
	set_interface(interface, singularityPath, cytosimContainerPath) ;

	/* Read input file specifying the parameters for cloning algo
	 * cloning_params.cpp, cloning_params.h
	 */

	// Define the name of the cloning config file
	const std::string cloneConfigFileName = "config.clone" ;

	// Declare cloning struct and get params
	Clones clones ;
	get_cloning_params(clones, cloneConfigFileName) ;

	// Declare cytosim struct and get some params
	Cytosim cytosim ;
	get_cytosim_params(cytosim, cloneConfigFileName) ;
	calculate_num_time_steps_and_frames(cytosim, clones) ;

	// generate config.cym that include the correct number of time steps and frames
	gen_cytosim_config_file(cytosim) ;

	/* For each iteration of cloning algo, loop following functions */

		/* Generate cytosim input files for each clone
		 * create_clones.cpp
		 */
		create_empty_directories(clones) ;

		/* Run iteration of simulation */
		run_sim(interface) ;
		run_report(interface) ;

		/* Calculate the value of the observable
		 * using the executable generated by files in /src/observable
		 */
		calc_observable() ;

		/* Run cloning algorithm calculations
		 * analyze_clones.cpp (maybe rename to cloning_calculations.cpp)
		 */

		/* Determine the logistics of copying
		 * count_clones.cpp (maybe rename to cloning_logistics.cpp)
		 */

		/* Generate cytosim "restart" files
		 * cytosim_interface.cpp (maybe have a separate file)
		 */
		// run_frametool(interface) ;

		// clones.idxIter++ ;

}
